{"version":3,"sources":["serviceWorker.js","component/Cards.js","component/CardList.js","component/Searchbox.js","component/Scroll.js","component/ErroBoundry.js","container/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","id","name","email","className","src","alt","height","width","Cardlist","cardArr","robots","map","robo","i","key","Searchbox","change","type","placeholder","onChange","Scroll","property","console","log","style","overflowY","border","children","ErroBoundry","props","state","hasErro","this","setState","Component","App","onSearchChange","event","searchField","target","value","filtered_r","filter","robot","toLowerCase","includes","length","fetch","then","response","json","users","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"sMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,qCCPSC,EAVF,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,GAAIC,EAAe,EAAfA,KAAMC,EAAS,EAATA,MACxB,OACC,yBAAKC,UAAY,+DACjB,yBAAKC,IAAG,oCAAgCJ,GAAMK,IAAI,QAAQC,OAAO,MAAMC,MAAM,QAC7E,gCAAON,GACP,+BAAMC,KCWOM,EAdE,SAAC,GAAgB,IAC3BC,EAD0B,EAAbC,OACIC,KAAI,SAACC,EAAKC,GAChC,OAAQ,kBAAC,EAAD,CACRC,IAAKF,EAAKZ,GACVA,GAAIY,EAAKZ,GACTC,KAAMW,EAAKX,KACXC,MAAOU,EAAKV,WAEb,OACA,6BACCO,ICCaM,EAZG,SAAC,GAAY,IAAXC,EAAU,EAAVA,OACnB,OACC,6BACC,2BACAC,KAAK,SACLC,YAAY,eACZf,UAAU,oCACVgB,SAAUH,MCCEI,EATA,SAACC,GAEf,OADAC,QAAQC,IAAIF,GAEX,yBAAKG,MAAO,CAACC,UAAW,SAAUC,OAAO,mBAAoBpB,OAAO,UAClEe,EAASM,WCiBEC,G,wDAnBd,WAAYC,GAAO,IAAD,8BACjB,cAAMA,IACDA,MAAQA,EACb,EAAKC,MAAQ,CACZC,SAAQ,GAJQ,E,gEAQjBC,KAAKC,SAAS,CAACF,SAAQ,M,+BAGvB,OAAIC,KAAKF,MAAMC,QACN,sDAEDC,KAAKH,MAAMF,a,GAfKO,cC4CXC,E,kDArCd,aAAc,IAAD,8BACZ,gBAMDC,eAAiB,SAACC,GACjB,EAAKJ,SAAS,CAACK,YAAcD,EAAME,OAAOC,QAC1ClB,QAAQC,IAAI,WAPZ,EAAKO,MAAQ,CACZpB,OAAQ,GACR4B,YAAa,IAJF,E,qDAWJ,IAAD,OACDG,EAAaT,KAAKF,MAAMpB,OAAOgC,QAAO,SAAAC,GAC3C,OAAOA,EAAM1C,KAAK2C,cAAcC,SAAS,EAAKf,MAAMQ,YAAYM,kBAEjE,OAA+B,IAA5BZ,KAAKF,MAAMpB,OAAOoC,OAAoB,uCAGxC,yBAAK3C,UAAW,MACf,8CACA,kBAAC,EAAD,CAAWa,OAAQgB,KAAKI,iBACxB,kBAAC,EAAD,KACC,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAU1B,OAAQ+B,S,0CAQF,IAAD,OAClBM,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKlB,SAAS,CAACvB,OAAOyC,W,GAnCrBjB,aCFlBkB,IAASC,OACR,kBAAC,EAAD,MACGC,SAASC,eAAe,SP2HtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBV,MAAK,SAAAW,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxC,QAAQwC,MAAMA,EAAMC,a","file":"static/js/main.77393cc1.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\r\nconst Card = ({id, name, email})=>{\r\n\treturn (\r\n\t\t<div className = 'tc bg-light-green dib br3 pa3 ma2 grow pointer bw5 shadow-5'>\r\n\t\t<img src= {`https://robohash.org/test/${id}`} alt=\"Robos\" height=\"200\" width=\"200\" />\r\n\t\t<h2> { name }</h2>\r\n\t\t<p> { email }</p>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Cards';\r\n\r\nconst Cardlist = ({ robots }) => {\r\n\tconst cardArr = robots.map((robo,i)=>{\r\n\t\treturn (<Card \r\n\t\tkey={robo.id}\r\n\t\tid={robo.id} \r\n\t\tname={robo.name} \r\n\t\temail={robo.email} />);\r\n\t})\r\n\treturn (\r\n\t<div>\r\n\t{cardArr}\r\n\t</div>);\r\n}\r\n\r\nexport default Cardlist;","import React from 'react';\r\n\r\nconst Searchbox = ({change})=>{\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<input \r\n\t\t\ttype='search' \r\n\t\t\tplaceholder='Searchbyname' \r\n\t\t\tclassName='pa3 ma3 bg-lightest-blue b--green'\r\n\t\t\tonChange={change}\r\n\t\t\t/> \r\n\t\t</div>\r\n\t\t)\r\n}\r\nexport default Searchbox;","import React from 'react'\r\nconst Scroll = (property)=>{\r\n\tconsole.log(property);\r\n\treturn (\r\n\t\t<div style={{overflowY: \"scroll\", border:' 5px solid black', height:'800px'}}>\r\n\t\t\t{property.children}\r\n\t\t</div>\r\n\t\t)\r\n}\r\n\r\nexport default Scroll","import React, {Component} from 'react';\r\n\r\nclass ErroBoundry extends Component{\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.props = props\r\n\t\tthis.state = {\r\n\t\t\thasErro:false\r\n\t\t}\r\n\t}\r\n\tcomponentDidCatch(){\r\n\t\tthis.setState({hasErro:true});\r\n\t}\r\n\trender(){\r\n\t\tif (this.state.hasErro){\r\n\t\t\treturn (<h1> Ooops, something erro</h1>);\r\n\t\t}else{\r\n\t\t\treturn this.props.children;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default ErroBoundry;","import React, {Component} from 'react';\r\nimport Cardlist from '../component/CardList'\r\nimport Searchbox from '../component/Searchbox'\r\nimport Scroll from '../component/Scroll'\r\nimport './App.css'\r\nimport 'tachyons';\r\nimport ErroBoundry from '../component/ErroBoundry'\r\n\r\nclass App extends Component{\r\n\tconstructor(){\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\trobots: [],\r\n\t\t\tsearchField: ''\r\n\t\t}\r\n\t}\r\n\tonSearchChange = (event) =>{\r\n\t\tthis.setState({searchField : event.target.value});\r\n\t\tconsole.log(\"change\")\r\n\t}\r\n\trender(){\r\n\t\tconst filtered_r = this.state.robots.filter(robot =>{\r\n\t\t\treturn robot.name.toLowerCase().includes(this.state.searchField.toLowerCase())\r\n\t\t})\r\n\t\tif(this.state.robots.length ===0) return(<h1>Loading</h1>)\r\n\t\telse{\r\n\t\t\treturn (\r\n\t\t\t<div className= 'tc'>\r\n\t\t\t\t<h1>Seach a Robot </h1> \r\n\t\t\t\t<Searchbox change={this.onSearchChange}/>\r\n\t\t\t\t<Scroll>\r\n\t\t\t\t\t<ErroBoundry>\r\n\t\t\t\t\t<Cardlist robots={filtered_r}/>\r\n\t\t\t\t\t</ErroBoundry>\r\n\t\t\t\t</Scroll>\r\n\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount(){\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t.then(response => response.json())\r\n\t\t.then(users => this.setState({robots:users}))\r\n\t}\r\n}\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport APP from './container/App';\nReactDOM.render(\n\t<APP />\n \t ,document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}